import org.gradle.api.internal.artifacts.dependencies.AbstractDependency
import org.gradle.api.internal.artifacts.dependencies.SelfResolvingDependencyInternal

import java.nio.file.Paths

def signingEnabled = project.hasProperty('signing.keyId') && project.hasProperty('signing.secretKeyRingFile')
if (signingEnabled) {
    def keyRingFilePath = project.'signing.secretKeyRingFile' as String
    keyRingFilePath = keyRingFilePath.replace('~', System.getProperty('user.home'))
    if (!Paths.get(keyRingFilePath).isAbsolute()) {
        keyRingFilePath = "$rootProject.projectDir/$keyRingFilePath"
    }
    project.'signing.secretKeyRingFile' = keyRingFilePath
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    repositories {
        mavenLocal()
    }
}

signing {
    required { signingEnabled }
}

def addPublication(Project proj, SourceSet sourceSet) {
    def sourceSetName = sourceSet.name

    def sourcesJarTask = proj.tasks.create(name: "${sourceSetName}SourcesJar", type: Jar) {
        from sourceSet.allSource
        archiveClassifier.value 'sources'
    }

    def javaDocJarTask = proj.tasks.create(name: "${sourceSetName}JavaDocJar", type: Jar) {
        from proj.javadoc
        archiveClassifier.value 'javadoc'
    }

    def jarTask = sourceSetName.equals('main') ? proj.jar : proj.tasks.create(name: "${sourceSetName}Jar", type: Jar, dependsOn: sourceSet.classesTaskName) {
        from sourceSet.output
        def artifactId = SourceSetDependency.getArtifactId(proj, sourceSet)
        archiveBaseName.value artifactId
    }

    def archivesConfig = proj.configurations.maybeCreate("${sourceSetName}Archives")

    proj.artifacts.add(archivesConfig.name, jarTask)
    proj.artifacts.add(archivesConfig.name, javaDocJarTask)
    proj.artifacts.add(archivesConfig.name, sourcesJarTask)

    def artifactId = SourceSetDependency.getArtifactId(proj, sourceSet)

    return project.publishing.publications.create("-$artifactId-Maven", MavenPublication) {
        it.groupId = project.group
        it.artifactId = artifactId

        archivesConfig.artifacts.each { af ->
            it.artifact af
        }

        it.pom {
            def projectUrl = "https://github.com/$projectUrlPath"
            def scmConnection = "scm:git:git://github.com/${projectUrlPath}.git"
            def scmDeveloperConnection = "scm:git:ssh://git@github.com/${projectUrlPath}.git"

            name = "$rootProject.name / $proj.name"
            description = "$projectDescription / module: $proj.name"
            url = projectUrl
            licenses {
                license {
                    name = projectLicense
                    url = "$projectUrl/blob/master/LICENSE"
                    distribution = 'repo'
                }
            }
            scm {
                url = projectUrl
                connection = scmConnection
                developerConnection = scmDeveloperConnection
            }
            issueManagement {
                system = 'GitHub'
                url = "$projectUrl/issues"
            }
            developers {
                developer {
                    id = developerId
                    name = developerName
                    email = developerEmail
                }
            }
        }

        it.pom.withXml {
            def rootNode = it.asNode()
            def depsNode = rootNode.appendNode('dependencies')
            Configuration confg
            def dependencies = proj.configurations.getByName(sourceSet.implementationConfigurationName).allDependencies
            dependencies
                    .findAll { it.group != null && it.name != null }
                    .forEach {
                def depNode = depsNode.appendNode('dependency')
                depNode.appendNode('groupId', it.group)
                depNode.appendNode('artifactId', it.name)
                depNode.appendNode('version', it.version)

                if (it.hasProperty('excludeRules') && !it.excludeRules.isEmpty()) {
                    def exclusionsNode = depNode.appendNode('exclusions')
                    it.excludeRules.each { rule ->
                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                        exclusionNode.appendNode('groupId', rule.group)
                        exclusionNode.appendNode('artifactId', rule.module)
                    }
                }
            }
        }
    }
}

class SourceSetDependency extends AbstractDependency implements FileCollectionDependency, SelfResolvingDependencyInternal {
    private final Project project
    private final SourceSet sourceSet

    SourceSetDependency(Project project, SourceSet sourceSet) {
        this.project = project
        this.sourceSet = sourceSet
    }

    static def getArtifactId(Project proj, SourceSet sourceSet) {
        sourceSet.name == 'main' ? proj.name : "$proj.name-$sourceSet.name"
    }

    @Override
    FileCollection getFiles() {
        return sourceSet.output
    }

    @Override
    Set<File> resolve() {
        return sourceSet.output.files
    }

    @Override
    Set<File> resolve(boolean transitive) {
        return sourceSet.output.files
    }

    @Override
    String getGroup() {
        return project.group
    }

    @Override
    String getName() {
        return getArtifactId(project, sourceSet)
    }

    @Override
    String getVersion() {
        return project.version
    }

    @Override
    boolean contentEquals(Dependency dependency) {
        if (!(dependency instanceof SourceSetDependency)) {
            return false
        }

        SourceSetDependency sourceSetDep = (SourceSetDependency)dependency
        return this.project == sourceSetDep.project && this.sourceSet == sourceSetDep.sourceSet
    }

    @Override
    Dependency copy() {
        return new SourceSetDependency(project, sourceSet)
    }

    @Override
    ComponentIdentifier getTargetComponentId() {
        return null
    }

    @Override
    TaskDependency getBuildDependencies() {
        return null
    }
}

project.subprojects { Project proj ->
    proj.ext.sourceSetDependency = { SourceSet srcSet -> new SourceSetDependency(proj, srcSet) }
}

def publishSourceSets(Project proj) {
    proj.sourceSets
            .findAll { it.name != 'test' && it.name != 'generated' }
            .each { SourceSet srcSet ->
                def publication = addPublication(proj, srcSet)
                project.signing.sign publication
            }
}

project.subprojects { Project proj ->
    if (proj.hasProperty('sourceSets')) {
        proj.afterEvaluate { publishSourceSets(proj) }
    }
}

task install(type: DefaultTask, dependsOn: publishToMavenLocal)
