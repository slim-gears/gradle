apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'com.adarshr.test-logger'

sourceCompatibility = rootProject.sourceCompatibility

dependencies {
    testImplementation libs.junit
    testImplementation libs.mockito
}

configurations {
    bundledImplementation
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

task zipTestReport(type: Zip, dependsOn: test) {
    destinationDirectory = file("$rootProject.projectDir/reports")
    archiveName = "test-report-${project.name}.zip"
    from fileTree("$buildDir/reports/tests/test")
}

test.finalizedBy(zipTestReport)

project.afterEvaluate {
    configurations {
        implementation.extendsFrom(bundledImplementation)
        testImplementation.extendsFrom(bundledImplementation)
    }

    configurations.each { configuration ->
        def prjDeps = configuration.dependencies
                .findAll { it instanceof ProjectDependency }
                .collect { it as ProjectDependency }

        def thisPrj = project
        prjDeps
                .each { dep ->
                    def depConfig = {
                        if (dep.targetConfiguration == null) {
                            thisPrj.dependencies {
                                it.add(configuration.name, it.project(path: dep.dependencyProject.path, configuration: 'bundledImplementation'))
                            }
                        } else {
                            thisPrj.dependencies {
                                it.add(configuration.name, thisPrj.files(dep.dependencyProject.configurations[dep.targetConfiguration].artifacts.files))
                            }
                        }
                    }

                    if (dep.targetConfiguration == null || dep.dependencyProject.configurations.findByName(dep.targetConfiguration) != null) {
                        depConfig.call()
                    } else {
                        dep.dependencyProject.afterEvaluate depConfig
                    }
                }
    }

    project.jar {
        from {
            configurations.bundledImplementation.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}
