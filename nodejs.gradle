apply plugin: 'java'
apply plugin: 'com.moowork.node'

project.ext {
    defaultNodeVer = '12.4.0'
}

node {
    version = rootProject.hasProperty('nodeVer') ? rootProject.nodeVer : project.defaultNodeVer
    download = true
    workDir = file("$rootProject.projectDir/nodejs")
    nodeModulesDir = file(project.projectDir)
}

def packageInstallTask = yarn

task npmBuildDev(type: NpmTask, dependsOn:packageInstallTask) {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run','buildDev']
}

task npmBuildWatch(type: NpmTask, dependsOn:packageInstallTask) {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run','buildWatch']
}

task npmBuild(type:NpmTask, dependsOn:packageInstallTask) {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run','build']
}

task npmPack(type:NpmTask, dependsOn:npmBuild) {
    group = 'pack'
    description = "Pack NPM package"
    args = ['pack']
}

task npmTest(type: NpmTask, dependsOn: npmBuild) {
    onlyIf {
        !npmBuild.state.upToDate
    }

    group = 'test'
    description = "Run NPM tests"
    args = ['run','test']
}

task npmPrune(type: NpmTask) {
    args = ['prune']
}

def createScript(String path, String text) {
    def file = project.file(path)
    file.text = text
    file.setExecutable(true, true)
}

task createNgWrapperScripts(type: DefaultTask, dependsOn: nodeSetup) {
    outputs.files('ng', 'ng.cmd')
    doLast {
        def nodeDir = node.variant.nodeDir
        def relativePath = project.projectDir.toPath().relativize(nodeDir.toPath())
        def canonicRelativePath = relativePath.toString().replace('\\', '/')

        createScript('ng',
"""#!/bin/sh
PATH=\$PATH:\$basedir/$canonicRelativePath
basedir=\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
\$basedir/$canonicRelativePath/node "\$basedir/node_modules/@angular/cli/bin/ng" \$*
""")

        createScript('ng.cmd',
"""@set PATH=%PATH%;%~dp0$relativePath
@%~dp0$relativePath\\node "%~dp0\\node_modules\\@angular\\cli\\bin\\ng" %*
""")

    }
}

task createNpmWrapperScripts(type: DefaultTask, dependsOn: npmSetup) {
    outputs.files('npm', 'npm.cmd')
    doLast {
        def nodeDir = node.variant.nodeDir
        def relativePath = project.projectDir.toPath().relativize(nodeDir.toPath())
        def canonicRelativePath = relativePath.toString().replace('\\', '/')

        createScript('npm',
"""#!/bin/sh
PATH=\$PATH:\$basedir/$canonicRelativePath
basedir=\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
\$basedir/$canonicRelativePath/node "\$basedir/$canonicRelativePath/node_modules/npm/bin/npm-cli.js" \$* --scripts-prepend-node-path=auto
""")
        createScript('npm.cmd',
"""@set PATH=%PATH%;%~dp0$relativePath
@%~dp0$relativePath\\node "%~dp0$relativePath\\node_modules\\npm\\bin\\npm-cli.js" %* --scripts-prepend-node-path=auto
""")
    }
}

task createYarnWrapperScripts(type: DefaultTask, dependsOn: yarnSetup) {
    outputs.files('yarn', 'yarn.cmd')
    doLast {
        def nodeDir = node.variant.nodeDir
        def relativePath = project.projectDir.toPath().relativize(nodeDir.toPath())
        def canonicRelativePath = relativePath.toString().replace('\\', '/')

        createScript('yarn',
"""#!/bin/sh
basedir=\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
PATH=\$PATH:\$basedir/.gradle/yarn/yarn-latest:\$basedir/$canonicRelativePath
\$basedir/.gradle/yarn/yarn-latest/yarn \$*
""")
        createScript('yarn.cmd',
"""@set PATH=%PATH%;%~dp0.gradle\\yarn\\yarn-latest;%~dp0$relativePath
%~dp0.gradle\\yarn\\yarn-latest\\yarn %*
""")
    }
}

if (!System.getenv('JITPACK')) {
    jar.dependsOn(npmBuild)
    if (!project.hasProperty('skipTests') || !project.skipTests) {
        test.dependsOn(npmTest)
    }
}

project.afterEvaluate { prj ->
    npmInstall.outputs.dir "$node.nodeModulesDir/node_modules"
    npmInstall.inputs.file "$node.nodeModulesDir/package.json"
    yarn.outputs.dir "$node.nodeModulesDir/node_modules"
    yarn.inputs.file "$node.nodeModulesDir/yarn.lock"
}

static def deleteIfExists(File file) {
    if (file.exists()) {
        file.delete()
    }
}

def deleteIfExists(String path) {
    return deleteIfExists(project.file(path))
}

clean.doLast {
    deleteIfExists("$projectDir/npm")
    deleteIfExists("$projectDir/npm.cmd")
    deleteIfExists("$projectDir/ng")
    deleteIfExists("$projectDir/ng.cmd")
    deleteIfExists("$projectDir/yarn")
    deleteIfExists("$projectDir/yarn.cmd")
}
