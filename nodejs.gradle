apply plugin: 'java'
apply plugin: 'com.moowork.node'

project.ext {
    defaultNodeVer = '10.8.0'
}

node {
    version = rootProject.hasProperty('nodeVer') ? rootProject.nodeVer : project.defaultNodeVer
    download = true
    workDir = file("$rootProject.projectDir/nodejs")
    nodeModulesDir = file(project.projectDir)
}

task npmBuildDev(type: NpmTask, dependsOn:npmInstall) {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run','buildDev']
}

task npmBuildWatch(type: NpmTask, dependsOn:npmInstall) {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run','buildWatch']
}

task npmBuild(type:NpmTask, dependsOn:npmInstall) {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run','build']
}

task npmPack(type:NpmTask, dependsOn:npmBuild) {
    group = 'pack'
    description = "Pack NPM package"
    args = ['pack']
}

task npmTest(type: NpmTask, dependsOn: npmBuild) {
    onlyIf {
        !npmBuild.state.upToDate
    }

    group = 'test'
    description = "Run NPM tests"
    args = ['run','test']
}

task npmPrune(type: NpmTask) {
    args = ['prune']
}

def createScript(String path, String text) {
    def file = project.file(path)
    file.text = text
    file.setExecutable(true, true)
}

task createNgWrapperScripts(type: DefaultTask, dependsOn: nodeSetup) {
    outputs.files('ng', 'ng.cmd')
    doLast {
        def nodeDir = node.variant.nodeDir
        def relativePath = project.projectDir.toPath().relativize(nodeDir.toPath())
        def canonicRelativePath = relativePath.toString().replace('\\', '/')

        createScript('ng',
"""#!/bin/sh
PATH=\$PATH:\$basedir/$canonicRelativePath
basedir=\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
\$basedir/$canonicRelativePath/node "\$basedir/node_modules/@angular/cli/bin/ng" \$*
""")

        createScript('ng.cmd',
"""@set PATH=%PATH%;%~dp0$relativePath
@%~dp0$relativePath\\node "%~dp0\\node_modules\\@angular\\cli\\bin\\ng" %*
""")

    }
}

task createNpmWrapperScripts(type: DefaultTask, dependsOn: nodeSetup) {
    outputs.files('npm', 'npm.cmd')
    doLast {
        def nodeDir = node.variant.nodeDir
        def relativePath = project.projectDir.toPath().relativize(nodeDir.toPath())
        def canonicRelativePath = relativePath.toString().replace('\\', '/')

        createScript('npm',
"""#!/bin/sh
PATH=\$PATH:\$basedir/$canonicRelativePath
basedir=\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
\$basedir/$canonicRelativePath/node "\$basedir/$canonicRelativePath/node_modules/npm/bin/npm-cli.js" \$*
""")
        createScript('npm.cmd',
"""@set PATH=%PATH%;%~dp0$relativePath
@%~dp0$relativePath\\node "%~dp0$relativePath\\node_modules\\npm\\bin\\npm-cli.js" %*
""")
    }
}

if (!System.getenv('JITPACK')) {
    jar.dependsOn(npmBuild)
    if (!project.hasProperty('skipTests') || !project.skipTests) {
        test.dependsOn(npmTest)
    }
}

project.afterEvaluate {
    npmInstall.outputs.files project.fileTree("$node.nodeModulesDir/node_modules")
    npmInstall.inputs.file("$node.nodeModulesDir/package.json")
}

clean.doLast {
    file("$projectDir/npm").delete()
    file("$projectDir/npm.cmd").delete()
    file("$projectDir/ng").delete()
    file("$projectDir/ng.cmd").delete()
}
