apply plugin: 'java'
apply plugin: 'com.github.node-gradle.node'

project.ext {
    defaultNodeVer = libs.nodeVer
}

node {
    version = rootProject.hasProperty('nodeVer') ? rootProject.nodeVer : project.defaultNodeVer
    download = true
    workDir = file("$rootProject.projectDir/nodejs")
    nodeProjectDir = file(project.projectDir)
}



task npmBuildDev(type: NpmTask, dependsOn:npmInstall) {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run','buildDev']
}

task npmBuildWatch(type: NpmTask, dependsOn:npmInstall) {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run','buildWatch']
}

task npmBuild(type:NpmTask, dependsOn:npmInstall) {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run','build']
}

task yarnBuild(type:YarnTask, dependsOn:yarn) {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['build']
}

task npmPack(type:NpmTask, dependsOn:npmBuild) {
    group = 'pack'
    description = "Pack NPM package"
    args = ['pack']
}

task yarnVersion(type: YarnTask, dependsOn: yarnBuild) {
    args = ['version', '--no-git-tag-version', '--new-version', project.version]
}

task yarnPack(type: YarnTask, dependsOn: yarnBuild) {
    inputs.files yarnBuild.outputs.files
    def packageOutput = "${buildDir}/${project.name}.tgz"
    outputs.file packageOutput
    group = 'pack'
    description = "Pack NPM package"
    args = ['pack', '--filename', packageOutput]
}

task npmTest(type: NpmTask, dependsOn: npmBuild) {
    outputs.upToDateWhen { yarnBuild.state.upToDate }
    group = 'test'
    description = "Run NPM tests"
    args = ['run','test']
}

task yarnTest(type: YarnTask, dependsOn: yarnBuild) {
    outputs.upToDateWhen { yarnBuild.state.upToDate }
    group = 'test'
    description = "Run NPM tests"
    args = ['test']
}

task npmPrune(type: NpmTask) {
    args = ['prune']
}

def createScript(String path, String text) {
    def file = project.file(path)
    file.text = text
    file.setExecutable(true, true)
}

project.afterEvaluate({ prj ->
    def baseDir = prj.file(prj.node.nodeProjectDir)
    def nodeDir = prj.file(nodeSetup.nodeDir)
    def nodeRelativePath = baseDir.toPath().relativize(nodeDir.toPath())
    def canonicRelativePath = nodeRelativePath.toString().replace('\\', '/')
    def prjDirRelativeToNode = baseDir.toPath().relativize(project.projectDir.toPath())
    def prjDirRelativeToNodeCanonic = prjDirRelativeToNode.toString().replace('\\', '/')

    task createNgWrapperScripts(type: DefaultTask, dependsOn: nodeSetup) {
        outputs.files("$baseDir/ng", "$baseDir/ng.cmd")
        doLast {

            createScript("$baseDir/ng",
                    """#!/bin/sh
PATH=\$PATH:\$basedir/$canonicRelativePath
basedir=\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
\$basedir/$canonicRelativePath/node "\$basedir/node_modules/@angular/cli/bin/ng" \$*
""")

            createScript("$baseDir/ng.cmd",
                    """@set PATH=%PATH%;%~dp0$nodeRelativePath
@%~dp0$nodeRelativePath\\node "%~dp0\\node_modules\\@angular\\cli\\bin\\ng" %*
""")

        }
    }

    task createNpmWrapperScripts(type: DefaultTask, dependsOn: npmSetup) {
        outputs.files("$baseDir/npm", "$baseDir/npm.cmd")
        doLast {
            createScript("$baseDir/npm",
                    """#!/bin/sh
basedir=\$(PWD)/\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")
PATH=\$PATH:\$basedir/$canonicRelativePath
\$basedir/$canonicRelativePath/node "\$basedir/$canonicRelativePath/node_modules/npm/bin/npm-cli.js" \$* --scripts-prepend-node-path=auto
""")
            createScript("$baseDir/npm.cmd",
                    """@set PATH=%PATH%;%~dp0$nodeRelativePath
@%~dp0$nodeRelativePath\\node "%~dp0$nodeRelativePath\\node_modules\\npm\\bin\\npm-cli.js" %* --scripts-prepend-node-path=auto
""")
        }
    }

    task createYarnWrapperScripts(type: DefaultTask, dependsOn: yarnSetup) {
        outputs.files("$baseDir/yarn", "$baseDir/yarn.cmd")
        doLast {
            createScript("$baseDir/yarn",
                    """#!/bin/sh
basedir=\$(PWD)/\$(dirname "\$(echo "\$0" | sed -e 's,\\\\,/,g')")/$prjDirRelativeToNodeCanonic
PATH=\$PATH:\$basedir/.gradle/yarn/yarn-latest:\$basedir/$canonicRelativePath
\$basedir/.gradle/yarn/yarn-latest/yarn \$*
""")
            createScript("$baseDir/yarn.cmd",
                    """@set PATH=%PATH%;%~dp0${prjDirRelativeToNode}\\.gradle\\yarn\\yarn-latest;%~dp0$nodeRelativePath
%~dp0${prjDirRelativeToNode}\\.gradle\\yarn\\yarn-latest\\yarn %*
""")
        }
    }
})

if (!System.getenv('JITPACK')) {
    if (!project.hasProperty('skipFrontend') || project.skipFrontend.toString() == "false") {
        processResources.dependsOn(yarnBuild)
        if (!project.hasProperty('skipTests') || project.skipTests.toString() == "false") {
            test.dependsOn(yarnTest)
        }
    }
}

static def deleteIfExists(File file) {
    if (file.exists()) {
        file.delete()
    }
}

def deleteIfExists(String path) {
    return deleteIfExists(project.file(path))
}

project.afterEvaluate { prj ->
    def nodeProjectDir = prj.node.nodeProjectDir.get()
    npmInstall.outputs.dir "$nodeProjectDir/node_modules"
    npmInstall.inputs.file "$nodeProjectDir/package.json"
    yarn.outputs.dir "$nodeProjectDir/node_modules"
    yarn.inputs.file "$nodeProjectDir/package.json"
    yarnPack.inputs.file "$nodeProjectDir/package.json"
    yarnPack.inputs.files yarnBuild.inputs.files
    clean.doLast {
        deleteIfExists("$nodeProjectDir/npm")
        deleteIfExists("$nodeProjectDir/npm.cmd")
        deleteIfExists("$nodeProjectDir/ng")
        deleteIfExists("$nodeProjectDir/ng.cmd")
        deleteIfExists("$nodeProjectDir/yarn")
        deleteIfExists("$nodeProjectDir/yarn.cmd")
    }
}
